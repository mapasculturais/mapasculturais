x-defaults: &defaults
  environment: &environment
    PORT: ${PORT}
    APP_MODE: ${APP_MODE}
    APP_ENV: ${APP_ENV}
    XDEBUG_MODE: ${XDEBUG_MODE}
    DB_HOST: ${DB_HOST}
    PWA_UPSTREAM: ${PWA_UPSTREAM}
    SERVER_NAME: ${SERVER_NAME}
    TRUSTED_PROXIES: ${TRUSTED_PROXIES}
    TRUSTED_HOSTS: ${TRUSTED_HOSTS}
    DATABASE_URL: ${DATABASE_URL}
    BUILD_ASSETS: ${BUILD_ASSETS}
    PENDING_PCACHE_RECREATION_INTERVAL: ${PENDING_PCACHE_RECREATION_INTERVAL}
    JOBS_INTERVAL: ${JOBS_INTERVAL}
    # REDIS_CACHE: ${REDIS_CACHE}
    MAILER_TRANSPORT: ${MAILER_TRANSPORT}
    MAILER_FROM: ${MAILER_FROM}
    NUM_PROCESSES: ${NUM_PROCESSES}
    MC_UPDATES_PROCESSES: ${MC_UPDATES_PROCESSES}
    GOOGLE_RECAPTCHA_SITEKEY: ${GOOGLE_RECAPTCHA_SITEKEY}
    GOOGLE_RECAPTCHA_SECRET: ${GOOGLE_RECAPTCHA_SECRET}
    SESSIONS_SAVE_PATH: ${SESSIONS_SAVE_PATH}
    # APP_RUNTIME: ${APP_RUNTIME}
    NIXPACKS_PHP_ROOT_DIR: ${NIXPACKS_PHP_ROOT_DIR}
    NIXPACKS_PHP_FALLBACK_PATH: ${NIXPACKS_PHP_FALLBACK_PATH}
    ACTIVE_THEME: 'MapasCulturais\Themes\BaseV2'

    SITE_NAME: ${SITE_NAME}
    SITE_DESCRIPTION: ${SITE_DESCRIPTION}
    LOGO_TITLE: ${LOGO_TITLE}
    LOGO_SUBTITLE: ${LOGO_SUBTITLE}
    LOGO_IMAGE: ${LOGO_IMAGE}
    AUTH_EMAIL_IMAGE: ${AUTH_EMAIL_IMAGE}
    AUTH_LOGIN_ON_REGISTER: ${AUTH_LOGIN_ON_REGISTER}
    STATUS_CREATE_AGENT: ${STATUS_CREATE_AGENT}
    AUTH_LOGIN_BY_CPF: ${AUTH_LOGIN_BY_CPF}

services:
  backend:
    <<: *defaults
    image: ghcr.io/redemapas/mapas
    build:
      context: .
      dockerfile: .nixpacks/Dockerfile
    restart: "${DOCKER_RESTART_POLICY:-always}"
    depends_on:
      - database
      - redis
      - mailhog
    environment:
      <<: *environment
    volumes:
      - var-files:/app/var/
      - assets-files:/app/public/assets
      - user-public-files:/app/public/files/
      - sessions-files:/app/var/sessions/
      - doctrine-files:/app/var/DoctrineProxies/
    ports:
      - 80
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
    #   interval: 30s       # Intervalo entre as verificações de saúde
    #   timeout: 10s        # Tempo limite para cada verificação
    #   retries: 3          # Número de tentativas antes de marcar como falha
    #   start_period: 5s    # Período de inicialização antes de começar as verificações

  database:
    image: kartoza/postgis:14
    restart: "${DOCKER_RESTART_POLICY:-always}"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      DATADIR: ${DATADIR}
    volumes:
      - db_data:/opt/postgres/data
      - ./dev/db:/data
    ports:
      - 5432
    healthcheck:
      test: "PGPASSWORD=${POSTGRES_PASSWORD} pg_isready -h 127.0.0.1 -U ${POSTGRES_USER} -d ${POSTGRES_DB}"

  # crontab:
  #   image: rancher/container-crontab:v0.5.0
  #   restart: '${DOCKER_RESTART_POLICY:-always}'
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"

  redis:
    image: redis:6
    restart: "${DOCKER_RESTART_POLICY:-always}"
    command: --maxmemory 128Mb --maxmemory-policy allkeys-lru
    volumes:
      - redis:/data
    ports:
      - 6379

  mailhog:
    image: mailhog/mailhog
    restart: '${DOCKER_RESTART_POLICY:-always}'
    ports:
      - 8025

  recreate-pending-pcache:
    <<: *defaults
    image: ghcr.io/redemapas/mapas
    # build:
    #   context: .
    #   dockerfile: .nixpacks/Dockerfile
    restart: "${DOCKER_RESTART_POLICY:-always}"
    depends_on:
      - database
    environment:
      <<: *environment
    volumes:
      - var-files:/app/var/
      - assets-files:/app/public/assets
      - user-public-files:/app/public/files/
      - sessions-files:/app/var/sessions/
      - doctrine-files:/app/var/DoctrineProxies/
    command: ./docker/recreate-pending-pcache-cron.sh
    # labels:
    #   - "cron.schedule=*/5 * * * * *"

  execute-job:
    <<: *defaults
    image: ghcr.io/redemapas/mapas
    # build:
    #   context: .
    #   dockerfile: .nixpacks/Dockerfile
    restart: "${DOCKER_RESTART_POLICY:-always}"
    depends_on:
      - database
    environment:
      <<: *environment
    volumes:
      - var-files:/app/var/
      - assets-files:/app/public/assets
      - user-public-files:/app/public/files/
      - sessions-files:/app/var/sessions/
      - doctrine-files:/app/var/DoctrineProxies/
    command: ./docker/jobs-cron.sh
    # labels:
    #   - "cron.schedule=*/5 * * * * *"

volumes:
  var-files:
  db_data:
  sessions:
  redis:
  pgadmin:
  user-public-files:
  assets-files:
  sessions-files:
  doctrine-files:
